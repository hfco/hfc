"use strict";(self.webpackChunkhfc_website=self.webpackChunkhfc_website||[]).push([[125],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6363:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_label:"The Cardano Node",title:"The Cardano Node",sidebar_position:2,slug:"/cardano"},s=void 0,c={unversionedId:"cardano/cardano-node",id:"cardano/cardano-node",title:"The Cardano Node",description:"The Cardano node is the largest open source project ever built using Haskell. It is a substantial code base, comprising almost 400,000 lines of code.",source:"@site/docs/cardano/cardano-node.mdx",sourceDirName:"cardano",slug:"/cardano",permalink:"/docs/cardano",draft:!1,editUrl:"https://github.com/hfco/docs/tree/master/docs/cardano/cardano-node.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"The Cardano Node",title:"The Cardano Node",sidebar_position:2,slug:"/cardano"},sidebar:"docsSidebar",previous:{title:"Documentation",permalink:"/docs/documentation"},next:{title:"Why Haskell",permalink:"/docs/haskell"}},u={},d=[],p={toc:d},f="wrapper";function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)(f,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Cardano node is the largest open source project ever built using Haskell. It is a substantial code base, comprising almost 400,000 lines of code.\nDespite being an extremely large and complex code base, with tight real time, networking and memory requirements, a requirement\nfor high availability, and a requirement for high assurance, there have been an impressively\nlow number of actual bugs reported (around 500), most of them very simple.  That is, about 1.25 bugs per thousand lines of code.\nIf written in a conventional imperative language, such as C++ or Java, not only would the code be larger (by about a factor of 2 to 5),\nit would also likely have many more bugs (about 18 per thousand lines of code for typical production quality code, produced by good industrial\ndevelopers, or a total of about 15,000-35,000 bugs)."),(0,a.kt)("p",null,"There are several reasons for this, notably:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Haskell is purely functional, so it is easier to confirm functional correctness; side-effects do not need to be considered"),(0,a.kt)("li",{parentName:"ul"},"The developer team is highly professional and motivated to produce high quality software even if this takes more time"),(0,a.kt)("li",{parentName:"ul"},"We are following a formal methods process that is geared to our engineering needs"),(0,a.kt)("li",{parentName:"ul"},"We can use excellent property-based testing techniques to catch problems early in the development cycle"),(0,a.kt)("li",{parentName:"ul"},"Haskell is a mature and production-ready language - it is now over 30 years old and much work has been done to make it useful in practice")))}m.isMDXComponent=!0}}]);